#+title: Emacs config for [minemacs](https://github.com/abougouffa/minemacs)
#+description:
#+author: Hmanhng
#+startup: indent show2levels

* early-config.el
:properties:
:header-args: :tangle-mode o444 :tangle early-config.el
:end:
#+begin_src emacs-lisp
;;; early-config.el -*- coding: utf-8-unix; lexical-binding: t; -*-

;; This file will be loaded at the end of `early-init.el', it can be used to set
;; some early initialization stuff, or to set some MinEmacs variables, specially
;; these used in macros.

;; Set log level to `info' rather than `error'
(unless minemacs-verbose-p
  (setq minemacs-msg-level 2))

;; Disable `dashboard'
(setq +dashboard-disable t)

;; Enable full screen at startup
;; (if-let ((fullscreen (assq 'fullscreen default-frame-alist)))
;;     (setcdr fullscreen 'fullboth)
;;   (push '(fullscreen . fullboth) default-frame-alist))

;; Force loading lazy packages immediately, not in idle time
;; (setq minemacs-not-lazy-p t)

;; Setup a `debug-on-message' to catch a wired message!
;; (setq debug-on-message "Package cl is deprecated")

;; Compute statistics to use with `use-package-report'
;; (setq use-package-compute-statistics t)
#+end_src

* modules.el
:properties:
:header-args: :tangle-mode o444 :tangle modules.el
:end:
#+begin_src emacs-lisp
;;; modules.el -*- lexical-binding: t; -*-

;;; Ordered list of enabled core modules
(setq minemacs-core-modules
      '(me-splash         ; Simple splash screen
        me-keybindings    ; Keybinding (general, which-key, hydra, ...)
        me-evil           ; Emacs as Vim (evil, evil-collection, evil-snipe, evil-numbers, ...)
        me-core-ui        ; Core UI (doom-themes, modus-themes, doom-modeline, ...)
        me-completion))   ; Completion (vertico, marginalia, corfu, cape, consult, embark, ...)

;;; List of enabled modules
(setq minemacs-modules
      '(me-ui             ; User interface (svg-lib, focus, mixed-pitch, ...)
        me-editor         ; Editing (tempel, tempel-collection, rainbow-delimiters, expreg, drag-stuff, ...)
        ;; me-daemon         ; Emacs daemon tweaks
        me-undo           ; Better undoing (undo-fu, undo-fu-session, vundo, ...)
        ;; me-multi-cursors  ; Multi-cursors editing (iedit, evil-mc, evil-iedit-state, ...)
        me-vc             ; Version control (magit, forge, core-review, diff-hl, ...)
        me-project        ; Project management (consult-project-extra, ibuffer-project, ...)
        me-prog           ; Programming stuff (tree-sitter, eldoc-box, apheleia, editorconfig, ...)
        me-checkers       ; Static checkers (flymake-easy, ...)
        ;; me-debug          ; Debugging tools (realgud, disaster, ...)
        ;; me-lsp         ; LSP and DAP (lsp-mode, dap-mode, consult-lsp, lsp-pyright, ccls, ...)
        me-emacs-lisp     ; Emacs lisp development (parinfer-rust, macrostep, eros, helpful, ...)
        ;; me-common-lisp ; Common Lisp development (sly, sly-quicklisp, ...)
        ;; me-scheme      ; Scheme development (racket-mode, geiser, ...)
        ;; me-clojure     ; Clojure development (clojure-mode, cider, ...)
        ;; me-embedded    ; Embedded systems (arduino, openocd, bitbake, ...)
        ;; me-robot       ; Robotics stuff (ros, robot-mode, ...)
        me-data           ; Data file formats (csv, yaml, toml, json, plantuml-mode, ...)
        ;; me-math        ; Mathematics (maxima, ess, ein, julia-mode, ...)
        ;; me-modeling    ; Modeling tools (scad-mode, ...)
        me-org            ; Org-mode for life (org-contrib, org-modern, org-appear, ...)
        ;; me-extra          ; Extra features (better-jumper, crux, ...)
        ;; me-notes          ; Notes & Zettelkasten (denote, ...)
        ;; me-email       ; Email (mu4e, mu4e-alert, org-msg, ...)
        ;; me-rss         ; News feed (elfeed, ...)
        ;; me-lifestyle   ; *Very* opinionated lifestyle packages (awqat, ...)
        ;; me-docs           ; Documents (pdf-tools, nov, ...)
        ;; me-calendar    ; Calendar (calfw, calfw-org, calfw-ical, ...)
        ;; me-latex          ; LaTeX (auctex, auctex-latexmk, ...)
        ;; me-biblio      ; Bibliography & citations (citar, zotxt, ...)
        ;; me-natural-langs  ; Natural language stuff (spell-fu, go-translate, eglot-ltex, ...)
        ;; me-files          ; Files and directories (dirvish, treemacs, vlf, ...)
        me-tools          ; System tools (vterm, tldr, ssh-deploy, docker, ...)
        me-tty            ; Emacs from terminal (xt-mouse, xclip, ...)
        ;; me-fun            ; Games and funny packages (xkcd, speed-type, ...)
        ;; me-media          ; Multimedia (empv, emms, ...)
        ;; me-workspaces  ; Workspace separation (tabspaces, ...)
        ;; me-binary         ; Display binary files in hex or decompile them
        me-window))       ; Frame & window tweaks

;;; List of disabled packages
(setq minemacs-disabled-packages
      (append
       '(time
         ;; me-ui
         focus
         me-writing-mode
         visual-fill-column
         ;; me-tools
         bitwarden)))
#+end_src

* config.el
:properties:
:header-args: :tangle-mode o444 :tangle config.el
:end:
** Lexical binding
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding]]
#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

** Lib
*** set-formatter!
Hack from ~Doomemacs~
#+begin_src emacs-lisp
(cl-defun set-formatter! (name args &key modes)
  (declare (indent defun))
  (cl-check-type name symbol)
  (with-eval-after-load 'apheleia
    (if (null args)
        (progn
          (setq apheleia-formatters
                (assq-delete-all name apheleia-formatters))
          (while (rassoc name apheleia-mode-alist)
            (setq apheleia-mode-alist
                  (assq-delete-all (car (rassoc name apheleia-mode-alist)) apheleia-mode-alist))))
      (let ((formatter (cond
                        ((listp args) `(,@args))
                        (t args))))
        (setf (alist-get name apheleia-formatters) formatter))
      (when modes
        (dolist (mode modes)
          (setf (alist-get mode apheleia-mode-alist) name))))))
#+end_src

** Personal info
#+begin_src emacs-lisp
(setq user-full-name "hmanhng"
      user-mail-address (concat "hmanhng" "@" "icloud" "." "com"))
#+end_src

** Themes
#+begin_src emacs-lisp
(defvar +theme 'kaolin-ocean "Default theme.")
(use-package kaolin-themes
  :straight t
  :config
  (setq kaolin-ocean-alt-bg nil
        kaolin-themes-hl-line-colored t
        kaolin-themes-git-gutter-solid t
        kaolin-themes-underline-wave nil
        kaolin-themes-modeline-border nil
        ;; kaolin-themes-modeline-padded 2
        kaolin-themes-italic-comments t
        kaolin-themes-org-scale-headings t
        kaolin-themes-distinct-metakeys nil))

;; Load theme
(setq minemacs-theme +theme)
#+end_src

** Fonts
#+begin_src emacs-lisp
(plist-put minemacs-fonts-plist
           :default ;; <- applies to the `default' face using `custom-theme-set-faces'
           '((:family "IBM Plex Mono" :height 180) ; <- priority 1
             (:family "Maple Mono" :height 170 :weight light) ; <- priority 2
             (:family "SF Pro Display" :height 160 :weight semi-light))) ; <- priority 3
#+end_src

** Language
*** Nix
#+begin_src emacs-lisp
(use-package nix-ts-mode
  :hook (nix-ts-mode . eglot-ensure)
  :config
  (set-formatter! 'alejandra '("alejandra" "-q" "-") :modes '(nix-ts-mode)))
#+end_src

*** Shell
#+begin_src emacs-lisp
(use-package bash-ts-mode
  :hook (bash-ts-mode . eglot-ensure)
  :init
  (add-to-list 'major-mode-remap-alist '(sh-mode . bash-ts-mode)))
#+end_src

*** Go
#+begin_src emacs-lisp
(use-package go-mode
  :straight t
  :hook (go-mode . eglot-ensure))
#+end_src

*** Java
#+begin_src emacs-lisp
(use-package java-ts-mode
  :mode "\\.java\\'"
  :hook (java-ts-mode . eglot-ensure)
  :config
  (with-eval-after-load 'eglot
    (+eglot-register
     '(java-mode java-ts-mode) `("jdt-language-server" "-data" ,(expand-file-name "java-workspace" minemacs-cache-dir)))))
#+end_src

** Org-mode
*** toc-org
Emacs utility to have an up-to-date table of contents in the org.
#+begin_src emacs-lisp
(use-package toc-org
  :straight t
  :defer t
  :hook ((org-mode markdown-mode) . toc-org-mode))
#+end_src

*** auto-tangle-mode
Minor mode for tangling literate files on save.
#+begin_src emacs-lisp
(use-package auto-tangle-mode
  :straight (auto-tangle-mode
             :host github
             :repo "progfolio/auto-tangle-mode.el"
             :local-repo "auto-tangle-mode")
  :commands (auto-tangle-mode)
  :defer t
  :hook (org-mode . auto-tangle-mode))
#+end_src

** Bind
#+begin_src emacs-lisp
(+map!
    "z"   '((lambda (local) (interactive "p")
             (unless repeat-mode (repeat-mode))
             (let ((local current-prefix-arg)
                   (current-prefix-arg nil))
               (call-interactively (if local #'text-scale-adjust #'global-text-scale-adjust))))
            :which-key "zoom"))
#+end_src
